# 6FB Methodologies Workshop - Kubernetes Secrets
# Secret management for production deployment
# NOTE: These are templates - actual secrets should be managed via external secret management

apiVersion: v1
kind: Secret
metadata:
  name: 6fb-methodologies-secrets
  namespace: 6fb-methodologies
  labels:
    app: 6fb-methodologies
    component: secrets
  annotations:
    # External secret management annotations
    external-secrets.io/backend: "aws-secrets-manager"
    external-secrets.io/key: "6fb-methodologies-prod-secrets"
    # Kubernetes native secret encryption
    secret.kubernetes.io/encryption: "enabled"
type: Opaque
stringData:
  # Database connection
  DATABASE_URL: "postgresql://username:password@hostname:5432/database"

  # Redis cache connection
  REDIS_URL: "redis://default:password@hostname:6379"

  # Stripe payment processing
  STRIPE_SECRET_KEY: "sk_live_xxxxxxxxxxxxxxxxxxxx"
  STRIPE_WEBHOOK_SECRET: "whsec_xxxxxxxxxxxxxxxxxxxxxxx"

  # Twilio SMS service
  TWILIO_ACCOUNT_SID: "ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
  TWILIO_AUTH_TOKEN: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

  # SendGrid email service
  SENDGRID_API_KEY: "SG.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

  # Generic webhook secret
  WEBHOOK_SECRET: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

  # JWT secret for session management
  JWT_SECRET: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

  # Encryption key for sensitive data
  ENCRYPTION_KEY: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: 6fb-methodologies-config
  namespace: 6fb-methodologies
  labels:
    app: 6fb-methodologies
    component: config
data:
  # Application configuration
  NODE_ENV: "production"
  PORT: "3000"
  NEXT_TELEMETRY_DISABLED: "1"

  # Public keys and non-sensitive configuration
  STRIPE_PUBLISHABLE_KEY: "pk_live_xxxxxxxxxxxxxxxxxxxx"
  TWILIO_PHONE_NUMBER: "+1234567890"
  FROM_EMAIL: "noreply@6fbmethodologies.com"
  BASE_URL: "https://6fbmethodologies.com"

  # Feature flags
  ENABLE_ANALYTICS: "true"
  ENABLE_MONITORING: "true"
  ENABLE_DEBUG_LOGS: "false"

  # Rate limiting configuration
  RATE_LIMIT_WINDOW_MS: "60000"
  RATE_LIMIT_MAX_REQUESTS: "30"
  RATE_LIMIT_SKIP_SUCCESSFUL: "false"

  # Cache configuration
  CACHE_TTL: "300"
  CACHE_MAX_SIZE: "1000"

  # Workshop configuration
  WORKSHOP_CITIES: "dallas-jan-2026,atlanta-feb-2026,vegas-mar-2026,sf-jun-2026,chicago-may-2026,nyc-apr-2026"
  DEFAULT_GA_LIMIT: "35"
  DEFAULT_VIP_LIMIT: "15"

  # Notification configuration
  NOTIFICATION_PHONE_NUMBERS: "+13525568981,+18135203348"
  ALERT_WEBHOOK_URL: "https://hooks.slack.com/services/YOUR/WEBHOOK/URL"

  # Monitoring configuration
  PROMETHEUS_METRICS_ENABLED: "true"
  HEALTH_CHECK_TIMEOUT: "5000"

---
# TLS Secret for SSL certificates
# This will be managed by cert-manager automatically
apiVersion: v1
kind: Secret
metadata:
  name: 6fb-methodologies-tls
  namespace: 6fb-methodologies
  labels:
    app: 6fb-methodologies
    component: tls
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
type: kubernetes.io/tls
# Data will be populated by cert-manager

---
# Database credentials secret (if using external database)
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: 6fb-methodologies
  labels:
    app: 6fb-methodologies
    component: database
type: Opaque
stringData:
  POSTGRES_DB: "sixfb_methodologies"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "secure_password_change_me"
  POSTGRES_HOST: "6fb-methodologies-postgres.postgres.svc.cluster.local"
  POSTGRES_PORT: "5432"

---
# Redis credentials secret (if using external Redis)
apiVersion: v1
kind: Secret
metadata:
  name: redis-credentials
  namespace: 6fb-methodologies
  labels:
    app: 6fb-methodologies
    component: cache
type: Opaque
stringData:
  REDIS_HOST: "6fb-methodologies-redis.redis.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_PASSWORD: "secure_redis_password_change_me"
  REDIS_AUTH_TOKEN: "secure_auth_token_change_me"

---
# Monitoring credentials
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-credentials
  namespace: 6fb-methodologies
  labels:
    app: 6fb-methodologies
    component: monitoring
type: Opaque
stringData:
  GRAFANA_ADMIN_PASSWORD: "secure_grafana_password"
  PROMETHEUS_WEB_USER: "admin"
  PROMETHEUS_WEB_PASSWORD: "secure_prometheus_password"
  ALERTMANAGER_WEB_USER: "admin"
  ALERTMANAGER_WEB_PASSWORD: "secure_alertmanager_password"

---
# External service API keys
apiVersion: v1
kind: Secret
metadata:
  name: external-service-keys
  namespace: 6fb-methodologies
  labels:
    app: 6fb-methodologies
    component: external-services
type: Opaque
stringData:
  # AWS credentials (if not using IAM roles)
  AWS_ACCESS_KEY_ID: "AKIAXXXXXXXXXXXXXXXX"
  AWS_SECRET_ACCESS_KEY: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
  AWS_DEFAULT_REGION: "us-east-1"

  # Cloudflare API token
  CLOUDFLARE_API_TOKEN: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

  # Analytics services
  GOOGLE_ANALYTICS_TRACKING_ID: "GA-XXXXXXXXX-X"
  MIXPANEL_TOKEN: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

  # Error tracking
  SENTRY_DSN: "https://xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx@sentry.io/xxxxxxx"
  SENTRY_AUTH_TOKEN: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

---
# SSL/TLS configuration for internal services
apiVersion: v1
kind: Secret
metadata:
  name: internal-tls
  namespace: 6fb-methodologies
  labels:
    app: 6fb-methodologies
    component: internal-tls
type: kubernetes.io/tls
stringData:
  # Self-signed certificate for internal service communication
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    # Internal TLS certificate content
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    # Internal TLS private key content
    -----END PRIVATE KEY-----

---
# Image pull secrets (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: 6fb-methodologies-registry
  namespace: 6fb-methodologies
  labels:
    app: 6fb-methodologies
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: |
    {
      "auths": {
        "ghcr.io": {
          "username": "username",
          "password": "github_personal_access_token",
          "auth": "base64_encoded_username:token"
        }
      }
    }
