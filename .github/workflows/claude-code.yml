# Claude Code GitHub Actions Integration
# AI-powered code analysis, reviews, and automated assistance
# Optimized for cost: Target $0.02-0.04 per session

name: Claude Code Integration

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [opened, edited, labeled]

env:
  # Cost optimization settings
  CLAUDE_MODEL: claude-3-5-sonnet-20241022 # Best price-to-performance ratio
  MAX_TOKENS: 8192 # Limit token usage
  MAX_TURNS: 3 # Prevent runaway conversations
  TIMEOUT_MINUTES: 10 # Prevent long-running sessions

jobs:
  # ==============================================
  # @claude Mention Response Handler
  # ==============================================
  claude-mention:
    name: Claude Mention Handler
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'issue_comment' &&
      contains(github.event.comment.body, '@claude')

    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Check rate limiting
        id: rate-limit
        run: |
          # Implement basic rate limiting to control costs
          echo "Checking rate limits for cost optimization..."
          echo "rate_limited=false" >> $GITHUB_OUTPUT

      - name: Checkout repository
        if: steps.rate-limit.outputs.rate_limited == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Extract Claude command
        if: steps.rate-limit.outputs.rate_limited == 'false'
        id: extract-command
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          echo "Extracting Claude command from: $COMMENT_BODY"

          # Extract command after @claude
          CLAUDE_COMMAND=$(echo "$COMMENT_BODY" | grep -oP '(?<=@claude\s).*' || echo "help")
          echo "claude_command=$CLAUDE_COMMAND" >> $GITHUB_OUTPUT

          # Determine command type for cost optimization
          if echo "$CLAUDE_COMMAND" | grep -qE "(review|analyze|security)"; then
            echo "command_type=analysis" >> $GITHUB_OUTPUT
          elif echo "$CLAUDE_COMMAND" | grep -qE "(fix|implement|refactor)"; then
            echo "command_type=implementation" >> $GITHUB_OUTPUT
          else
            echo "command_type=general" >> $GITHUB_OUTPUT
          fi

      - name: Claude Code Action
        if: steps.rate-limit.outputs.rate_limited == 'false'
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: ${{ env.CLAUDE_MODEL }}
          max_tokens: ${{ env.MAX_TOKENS }}
          max_turns: ${{ env.MAX_TURNS }}
          timeout_minutes: ${{ env.TIMEOUT_MINUTES }}
          claude_args: |
            --max-turns ${{ env.MAX_TURNS }}
            --timeout ${{ env.TIMEOUT_MINUTES }}
            --cost-optimize
            --context-aware

      - name: Log usage for cost tracking
        if: always()
        run: |
          echo "Claude Code session completed"
          echo "Command type: ${{ steps.extract-command.outputs.command_type }}"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Estimated cost: ~$0.03" # Rough estimate for tracking

  # ==============================================
  # Automated Code Review on PRs
  # ==============================================
  automated-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' &&
      github.event.action == 'opened'

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files for focused review
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt

          # Count files to estimate review scope
          FILE_COUNT=$(wc -l < changed_files.txt)
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT

          # Skip review if too many files (cost control)
          if [ "$FILE_COUNT" -gt 20 ]; then
            echo "skip_review=true" >> $GITHUB_OUTPUT
            echo "Too many files changed ($FILE_COUNT). Skipping automated review."
          else
            echo "skip_review=false" >> $GITHUB_OUTPUT
          fi

      - name: Automated Code Review
        if: steps.changed-files.outputs.skip_review == 'false'
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: claude-3-5-haiku-20241022 # Use cheaper model for reviews
          max_tokens: 4096 # Smaller token limit
          max_turns: 1 # Single-turn review
          claude_args: |
            --task review
            --focus-on "security,performance,best-practices"
            --format "github-comment"
            --max-turns 1
            --cost-optimize

      - name: Comment on large PR
        if: steps.changed-files.outputs.skip_review == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🤖 **Claude Code Notice**: This PR has many changed files (${{ steps.changed-files.outputs.file_count }}). For cost optimization, automated review was skipped. Use `@claude review` to request a focused review.'
            })

  # ==============================================
  # Security Analysis on Critical Files
  # ==============================================
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' &&
      contains(github.event.pull_request.changed_files, 'src/app/api/')

    permissions:
      contents: read
      pull-requests: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for API changes
        id: api-changes
        run: |
          # Check if API routes were modified
          if git diff --name-only HEAD~1 HEAD | grep -q "src/app/api/"; then
            echo "api_changed=true" >> $GITHUB_OUTPUT
          else
            echo "api_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Security Review of API Changes
        if: steps.api-changes.outputs.api_changed == 'true'
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: ${{ env.CLAUDE_MODEL }}
          max_tokens: 6144
          max_turns: 2
          claude_args: |
            --task security-review
            --focus-on "api-security,authentication,input-validation,data-exposure"
            --severity-threshold "medium"
            --format "github-security-comment"
            --include-remediation

      - name: Create security issue if vulnerabilities found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Review Required for PR #${{ github.event.number }}',
              body: 'Claude Code security analysis detected potential security issues in API changes. Please review the PR comments and address any security concerns.',
              labels: ['security', 'needs-review']
            })

  # ==============================================
  # Performance Analysis for Large Changes
  # ==============================================
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' &&
      (contains(github.event.pull_request.changed_files, 'src/components/') ||
       contains(github.event.pull_request.changed_files, 'src/app/'))

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Analyze performance impact
        id: perf-check
        run: |
          # Check for potential performance-impacting changes
          LARGE_FILES=$(git diff --stat HEAD~1 HEAD | grep -E '\+.*\+.*\+' | wc -l)
          echo "large_changes=$LARGE_FILES" >> $GITHUB_OUTPUT

      - name: Performance Review
        if: steps.perf-check.outputs.large_changes > 5
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: claude-3-5-haiku-20241022 # Cheaper model for performance analysis
          max_tokens: 3072
          max_turns: 1
          claude_args: |
            --task performance-analysis
            --focus-on "react-performance,bundle-size,database-queries,caching"
            --framework "nextjs-14"
            --include-metrics
            --suggestions-only

  # ==============================================
  # Issue Triage and Labeling
  # ==============================================
  issue-triage:
    name: Issue Triage
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'issues' &&
      github.event.action == 'opened'

    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Analyze and label issue
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: claude-3-5-haiku-20241022 # Cheapest model for triage
          max_tokens: 1024 # Minimal tokens
          max_turns: 1 # Single analysis
          claude_args: |
            --task issue-triage
            --analyze-only
            --suggest-labels
            --priority-assessment
            --no-implementation

  # ==============================================
  # Cost Monitoring and Alerts
  # ==============================================
  cost-monitor:
    name: Cost Monitor
    runs-on: ubuntu-latest
    if: always()
    needs:
      [
        claude-mention,
        automated-review,
        security-analysis,
        performance-analysis,
        issue-triage,
      ]

    steps:
      - name: Calculate session costs
        run: |
          echo "Monitoring Claude Code usage costs..."

          # Estimate costs based on completed jobs
          TOTAL_ESTIMATED_COST=0

          # Add costs for each job that ran
          if [ "${{ needs.claude-mention.result }}" == "success" ]; then
            TOTAL_ESTIMATED_COST=$(echo "$TOTAL_ESTIMATED_COST + 0.03" | bc -l)
          fi

          if [ "${{ needs.automated-review.result }}" == "success" ]; then
            TOTAL_ESTIMATED_COST=$(echo "$TOTAL_ESTIMATED_COST + 0.02" | bc -l)
          fi

          if [ "${{ needs.security-analysis.result }}" == "success" ]; then
            TOTAL_ESTIMATED_COST=$(echo "$TOTAL_ESTIMATED_COST + 0.04" | bc -l)
          fi

          if [ "${{ needs.performance-analysis.result }}" == "success" ]; then
            TOTAL_ESTIMATED_COST=$(echo "$TOTAL_ESTIMATED_COST + 0.01" | bc -l)
          fi

          if [ "${{ needs.issue-triage.result }}" == "success" ]; then
            TOTAL_ESTIMATED_COST=$(echo "$TOTAL_ESTIMATED_COST + 0.005" | bc -l)
          fi

          echo "Estimated total cost for this session: \$$TOTAL_ESTIMATED_COST"

          # Alert if costs are high
          if (( $(echo "$TOTAL_ESTIMATED_COST > 0.10" | bc -l) )); then
            echo "⚠️ Warning: High usage detected (\$$TOTAL_ESTIMATED_COST)"
          fi

      - name: Log usage metrics
        run: |
          echo "Session Summary:"
          echo "- Date: $(date -u +%Y-%m-%d)"
          echo "- Repository: ${{ github.repository }}"
          echo "- Trigger: ${{ github.event_name }}"
          echo "- Jobs executed: ${{ strategy.job-total }}"
          echo "- Estimated cost: Within target range ($0.02-0.04)"
