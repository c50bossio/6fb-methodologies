# 6FB Methodologies Workshop - Development Environment
# Optimized for local development with hot reload and debugging

version: '3.8'

services:
  # Next.js Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: 6fb-methodologies-dev
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/6fb_methodologies_dev
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env.local
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - 6fb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: 6fb-postgres-dev
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: 6fb_methodologies_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - 6fb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d 6fb_methodologies_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: 6fb-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - 6fb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Adminer for Database Management (Development Only)
  adminer:
    image: adminer:4.8.1
    container_name: 6fb-adminer-dev
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: dracula
    networks:
      - 6fb-network
    restart: unless-stopped
    profiles:
      - debug

  # Redis Commander for Redis Management (Development Only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: 6fb-redis-commander-dev
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - 6fb-network
    restart: unless-stopped
    profiles:
      - debug

networks:
  6fb-network:
    driver: bridge
    name: 6fb-methodologies-network

volumes:
  postgres_data:
    name: 6fb-postgres-data
  redis_data:
    name: 6fb-redis-data